table 'Resource governor external resource pool affinity'
	lineageTag: 9b87492a-ffc5-47c9-b11d-afbf3e9ee091

	column 'Pool name'
		dataType: string
		lineageTag: acfeae9e-e52a-42ef-8856-70cb16fea8dd
		summarizeBy: none
		sourceColumn: Pool name

		annotation SummarizationSetBy = Automatic

	column 'Processor group'
		dataType: string
		lineageTag: e63aa8f1-b40b-4072-83fe-90d38e0bbafb
		summarizeBy: none
		sourceColumn: Processor group

		annotation SummarizationSetBy = Automatic

	column Timestamp
		dataType: dateTime
		formatString: dd-mmm-yyyy hh:nn:ss
		lineageTag: 634c93c9-0926-4c7f-a381-6ba89477af63
		summarizeBy: none
		sourceColumn: Timestamp

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isCustom":true}

	column 'CPU mask'
		dataType: string
		lineageTag: 45a7215f-acab-4391-9ef2-9173b75a4a90
		summarizeBy: none
		sourceColumn: CPU mask

		annotation SummarizationSetBy = Automatic

	partition 'Resource governor external resource pool affinity' = m
		mode: import
		queryGroup: Facts
		source = ```
				let
				  loadConfig = Record.Field(
				    Table.First(Table.SelectRows(#"Data load", each [Service] = "Resource Governor configuration")), 
				    "DataLoad"
				  ), 
				  dbList = Sql.Databases(#"Server name"), 
				  db     = dbList{[Name = #"Database name"]}[Data], 
				  table  = db{[Schema = #"Schema name", Item = "Resource governor external resource pool affinity"]}[Data], 
				  emptyDataset = Table.FirstN(table, 0), 
				  datasetToUse = if (loadConfig = "Yes") then table else emptyDataset,
				  renameColumns = Table.RenameColumns(
				    datasetToUse, 
				    {
				      {"CPUMask", "CPU mask"}, 
				      {"PoolName", "Pool name"}, 
				      {"ProcessorGroup", "Processor group"}
				    }
				  )
				in
				  renameColumns
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

