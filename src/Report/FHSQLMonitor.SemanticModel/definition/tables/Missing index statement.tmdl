table 'Missing index statement'
	lineageTag: d0325c89-0f9d-447b-9265-8c6e765609e4

	column Statement
		dataType: string
		lineageTag: 8029ae0c-2b7e-451e-a71b-9150070728e9
		summarizeBy: none
		sourceColumn: Statement

		annotation SummarizationSetBy = Automatic

	column MissingIndexStatementKey
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 152136ec-ac23-4aea-9a02-7135a25646f3
		summarizeBy: none
		sourceColumn: MissingIndexStatementKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	partition 'Missing index statement' = m
		mode: import
		queryGroup: Dimensions
		source = ```
				let
				  loadConfigFirstMatch = Table.First(
				    Table.SelectRows(
				      #"Data load", 
				      each List.Contains({"Missing indexes"}, [Service])
				        and List.Contains({"Yes"}, [DataLoad])
				    )
				  ), 
				  loadConfig = 
				    if (loadConfigFirstMatch = null) then
				      "No"
				    else
				      Record.Field(loadConfigFirstMatch, "DataLoad"), 
				  serverName = Record.Field(
				    Table.First(Table.SelectRows(#"Connection parameters", each [Key] = "ServerName")), 
				    "Value"
				  ), 
				  databaseName = Record.Field(
				    Table.First(Table.SelectRows(#"Connection parameters", each [Key] = "DatabaseName")), 
				    "Value"
				  ), 
				  schemaName = Record.Field(
				    Table.First(Table.SelectRows(#"Connection parameters", each [Key] = "SchemaName")), 
				    "Value"
				  ), 
				  dbList = Sql.Databases(serverName), 
				  db     = dbList{[Name = databaseName]}[Data], 
				  table  = db{[Schema = schemaName, Item = "Missing index statement"]}[Data], 
				  emptyDataset = Table.FirstN(table, 0), 
				  datasetToUse = if (loadConfig = "Yes") then table else emptyDataset
				in
				  datasetToUse
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

