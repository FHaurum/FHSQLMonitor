table 'File group'
	lineageTag: 7463e982-c410-42ae-a376-8e9dd47cb717

	column Database
		dataType: string
		lineageTag: d59c0c45-52e1-4bc2-a1e8-faf9e9e83ef5
		summarizeBy: none
		sourceColumn: Database

		annotation SummarizationSetBy = Automatic

	column 'File group'
		dataType: string
		lineageTag: fb9ce2bc-e3f4-44ba-93c9-995fcabd687b
		summarizeBy: none
		sourceColumn: File group

		annotation SummarizationSetBy = Automatic

	column FileGroupKey
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 953211df-8efc-4305-ab21-982ded97005a
		summarizeBy: none
		sourceColumn: FileGroupKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	partition 'File group' = m
		mode: import
		queryGroup: Dimensions
		source = ```
				let
				  loadConfigFirstMatch = Table.First(
				    Table.SelectRows(
				      #"Data load", 
				      each List.Contains(
				        {"Capacity"}, 
				        [Service]
				      )
				        and List.Contains({"Yes"}, [DataLoad])
				    )
				  ), 
				  loadConfig = 
				    if (loadConfigFirstMatch = null) then
				      "No"
				    else
				      Record.Field(loadConfigFirstMatch, "DataLoad"), 
				  dbList = Sql.Databases(#"Server name"), 
				  db     = dbList{[Name = #"Database name"]}[Data], 
				  table  = db{[Schema = #"Schema name", Item = "File group"]}[Data], 
				  emptyDataset = Table.FirstN(table, 0), 
				  datasetToUse = if (loadConfig = "Yes") then table else emptyDataset
				in
				  datasetToUse
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

