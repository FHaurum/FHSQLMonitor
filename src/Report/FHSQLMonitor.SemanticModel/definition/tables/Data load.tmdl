table 'Data load'
	lineageTag: 098c2657-f3b4-4735-9543-4d102944117c

	column Service
		dataType: string
		lineageTag: ab36902a-920c-4bdf-b126-fd5c85efb11d
		summarizeBy: none
		sourceColumn: Service

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column DataLoad
		dataType: string
		lineageTag: 2e7db343-a195-4175-92f1-2c9a0da73acb
		summarizeBy: none
		sourceColumn: DataLoad

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column 'Sevices affected'
		dataType: string
		lineageTag: 758fa606-4583-48a2-9c1b-048f5691b95b
		summarizeBy: none
		sourceColumn: Sevices affected

		annotation SummarizationSetBy = Automatic

	partition 'Data load' = m
		mode: import
		queryGroup: Framework
		source = ```
				let
				  systemServices = Table.FromRows(
				    Json.Document(
				      Binary.Decompress(
				        Binary.FromText(
				          "bVLLboMwEPwVi3N+Im2lFqlV0jZVDiGHxSzONmSN/EhLv74GhIGEm3f2NTPrwyFZK2QnvnVuhdRckvIGHGlOVklyXM3yNZpSmwuwxCH7APLs6xhVWp6tAC5EgVB00ZB7hBokuSbET+AgB4vC0h9mvAXjqF2JhSAu8BdtxjvIq76g79bMKNuiceD2a3jGgbcK1tUPNFZs+CYza0o3w5y03S500NmVQRUSPVYhlMK6AFtHMvB7DdomwKzd0aXlPRtanxpLsps4Qb0FhXHJPceUw4pg9/JpYrbl4aMxb2QtsRq8HODNi0BjtInAdjznVMnUNWegLEmGGy3WZvyBVnsTwGd9RcPazD5Jt6WC4D7IE0a1I648FSPDd4+mmVPp8Psli3Z83jXuDCmFo+I9kFuYvz9pQeHbhv917fkd/wE=",
				          BinaryEncoding.Base64
				        ),
				        Compression.Deflate
				      )
				    ),
				    let
				      _t = ((type nullable text) meta [Serialized.Text = true])
				    in
				      type table [Service = _t, #"Sevices affected" = _t]
				  ), 
				  dataLoadUsed = 
				    if (#"Data load list" = null) then
				      let
				        addLoadEnabledColumn = Table.AddColumn(
				          systemServices, 
				          "DataLoad", 
				          each "Yes"
				        ), 
				        changedType = Table.TransformColumnTypes(
				          addLoadEnabledColumn, 
				          {
				            {"DataLoad", type text}
				          }
				        )
				      in
				        changedType
				    else
				      let
				        dataLoadList = Text.Split(#"Data load list", ","), 
				        dataLoadTable = Table.FromList(
				          dataLoadList, 
				          Splitter.SplitByNothing(), 
				          null, 
				          null, 
				          ExtraValues.Error
				        ), 
				        renamedColumns = Table.RenameColumns(
				          dataLoadTable, 
				          {
				            {"Column1", "DataLoadService"}
				          }
				        ), 
				        addLoadEnabledColumn = Table.AddColumn(
				          renamedColumns, 
				          "DataLoad", 
				          each "Yes"
				        ), 
				        changedType = Table.TransformColumnTypes(
				          addLoadEnabledColumn, 
				          {
				            {"DataLoadService", type text}, 
				            {"DataLoad", type text}
				          }
				        ), 
				        joinedTable = Table.FuzzyJoin(
				          systemServices, 
				          {"Service"}, 
				          changedType, 
				          {"DataLoadService"}, 
				          JoinKind.LeftOuter, 
				          [IgnoreCase = true, IgnoreSpace = false]
				        ), 
				        removedColumns = Table.RemoveColumns(joinedTable, "DataLoadService"), 
				        replacedValue = Table.ReplaceValue(
				          removedColumns, 
				          null, 
				          "No", 
				          Replacer.ReplaceValue, 
				          {"DataLoad"}
				        )
				      in
				        replacedValue, 
				  sortedRows = Table.Sort(
				    dataLoadUsed, 
				    {
				      {"Service", Order.Ascending}
				    }
				  )
				in
				  sortedRows
				```

	changedProperty = IsHidden

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

