table 'Blocks and deadlocks'
	lineageTag: 2c95f677-44f5-4dfa-a1d8-e67f476a1af9

	column 'Client application'
		dataType: string
		lineageTag: 3b91fddc-9004-4b36-90ad-f1e6828f142c
		summarizeBy: none
		sourceColumn: Client application

		annotation SummarizationSetBy = Automatic

	column 'Host name'
		dataType: string
		lineageTag: 8c0bf149-c653-42ec-b2bf-bca9caa404b5
		summarizeBy: none
		sourceColumn: Host name

		annotation SummarizationSetBy = Automatic

	column 'Login name'
		dataType: string
		lineageTag: 012b9f47-e580-4d58-9a00-847e4db19baa
		summarizeBy: none
		sourceColumn: Login name

		annotation SummarizationSetBy = Automatic

	column BlocksAndDeadlocksKey
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 467c9ecd-6159-4c8e-a078-d689664c6095
		summarizeBy: none
		sourceColumn: BlocksAndDeadlocksKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	partition 'Blocks and deadlocks' = m
		mode: import
		queryGroup: Dimensions
		source = ```
				let
				  loadConfigFirstMatch = Table.First(
				    Table.SelectRows(
				      #"Data load", 
				      each List.Contains(
				        {"Blocks and deadlocks"}, 
				        [Service]
				      )
				        and List.Contains({"Yes"}, [DataLoad])
				    )
				  ), 
				  loadConfig = 
				    if (loadConfigFirstMatch = null) then
				      "No"
				    else
				      Record.Field(loadConfigFirstMatch, "DataLoad"), 
				  serverName = Record.Field(
				    Table.First(Table.SelectRows(#"Connection parameters", each [Key] = "ServerName")), 
				    "Value"
				  ), 
				  databaseName = Record.Field(
				    Table.First(Table.SelectRows(#"Connection parameters", each [Key] = "DatabaseName")), 
				    "Value"
				  ), 
				  schemaName = Record.Field(
				    Table.First(Table.SelectRows(#"Connection parameters", each [Key] = "SchemaName")), 
				    "Value"
				  ), 
				  dbList = Sql.Databases(serverName), 
				  db     = dbList{[Name = databaseName]}[Data], 
				  table  = db{[Schema = schemaName, Item = "Blocks and deadlocks"]}[Data], 
				  emptyDataset = Table.FirstN(table, 0), 
				  datasetToUse = if (loadConfig = "Yes") then table else emptyDataset,
				  renameColumns = Table.RenameColumns(
				    datasetToUse, 
				    {
				      {"ClientApp", "Client application"}, 
				      {"HostName", "Host name"}, 
				      {"LoginName", "Login name"}
				    }
				  )
				in
				  renameColumns
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

