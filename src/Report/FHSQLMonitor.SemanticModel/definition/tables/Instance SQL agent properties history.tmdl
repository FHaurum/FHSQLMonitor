table 'Instance SQL agent properties history'
	lineageTag: d1ba4980-24f1-4755-9398-a1bc66ac95ac

	column Key
		dataType: string
		lineageTag: 034bf62f-1df5-451f-af1c-5c2ac57ae703
		summarizeBy: none
		sourceColumn: Key

		annotation SummarizationSetBy = Automatic

	column From
		dataType: dateTime
		formatString: dd-mmm-yyyy hh:nn:ss
		lineageTag: f8166220-d8d8-49bf-8b46-57df0f9bc5e1
		summarizeBy: none
		sourceColumn: From

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isCustom":true}

	column To
		dataType: dateTime
		formatString: dd-mmm-yyyy hh:nn:ss
		lineageTag: c1d180b2-26ac-4fff-99e3-9780b19a7bbe
		summarizeBy: none
		sourceColumn: To

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isCustom":true}

	column Value
		dataType: string
		lineageTag: e3ffe41d-6567-4362-ba73-54629c8bc561
		summarizeBy: none
		sourceColumn: Value

		annotation SummarizationSetBy = Automatic

	partition 'Instance SQL agent properties history' = m
		mode: import
		queryGroup: Facts
		source = ```
				let
				  loadConfig = Record.Field(
				    Table.First(Table.SelectRows(#"Data load", each [Service] = "Instance configuration")), 
				    "DataLoad"
				  ), 
				  dbList = Sql.Databases(#"Server name"), 
				  db = dbList{[Name = #"Database name"]}[Data], 
				  table = db{[Schema = #"Schema name", Item = "Instance SQL agent properties history"]}[Data], 
				  emptyDataset = Table.FirstN(table, 0), 
				  datasetToUse = if (loadConfig = "Yes") then table else emptyDataset, 
				  RenameColumns = Table.RenameColumns(datasetToUse, {{"ValidFrom", "From"}, {"ValidTo", "To"}})
				in
				  RenameColumns
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

