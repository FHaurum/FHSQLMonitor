table 'Always On synchronization lag'
	lineageTag: 7b45731c-800a-4b9c-9248-9d3ba34280c9

	column SynchronizationLagMS
		dataType: double
		isHidden
		lineageTag: d8a2d1de-ca72-4a6f-b134-26499cce5f60
		summarizeBy: none
		sourceColumn: SynchronizationLagMS

		changedProperty = IsHidden

		annotation SummarizationSetBy = User

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Date
		dataType: dateTime
		isHidden
		formatString: Long Date
		lineageTag: 98f1da4a-a1f0-4dd1-a876-453c0cbae290
		summarizeBy: none
		sourceColumn: Date

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column TimeKey
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: 9a8c5258-e45f-47ee-a546-9ef5e518f876
		summarizeBy: none
		sourceColumn: TimeKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column DatabaseKey
		dataType: int64
		isHidden
		formatString: 0
		lineageTag: bd7dffb8-ce30-44d2-a5ad-5ad6ddacf831
		summarizeBy: none
		sourceColumn: DatabaseKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	partition 'Always On synchronization lag' = m
		mode: import
		queryGroup: Facts
		source = ```
				let
				  loadConfig = Record.Field(
				    Table.First(Table.SelectRows(#"Data load", each [Service] = "Performance statistics")), 
				    "DataLoad"
				  ), 
				  dbList = Sql.Databases(#"Server name"), 
				  db     = dbList{[Name = #"Database name"]}[Data], 
				  table  = db{[Schema = #"Schema name", Item = "Always On synchronization lag"]}[Data], 
				  emptyDataset = Table.FirstN(table, 0), 
				  datasetToUse = if (loadConfig = "Yes") then table else emptyDataset, 
				  selectColumns = Table.SelectColumns(
				    datasetToUse, 
				    {
				      "SynchronizationLagMS", 
				      "Date", 
				      "TimeKey", 
				      "DatabaseKey"
				    }
				  )
				in
				  selectColumns
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

