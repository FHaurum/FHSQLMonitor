$outputFile = "..\build\FHSQLMonitor.sql"

$versionNumber = "v2.9.0"

$buildTimeStr = (Get-Date).ToString("yyyy:MM:dd HH:mm:ss")

if (Test-Path $outputFile) {
    Clear-Content $outputFile
}

Add-Content $outputFile "USE master;"
Add-Content $outputFile ""
Add-Content $outputFile "--"
Add-Content $outputFile ("-- FHSQLMonitor " + $versionNumber + " - " + $buildTimeStr)
Add-Content $outputFile "--"
Add-Content $outputFile ""
Add-Content $outputFile "BEGIN"
Add-Content $outputFile "	--"
Add-Content $outputFile "	-- Installation parameters - They are used both during a fresh installation and during an update"
Add-Content $outputFile "	--"
Add-Content $outputFile "	DECLARE @createSQLAgentJob    bit           = 1;"
Add-Content $outputFile "	DECLARE @fhSQLMonitorDatabase nvarchar(128) = 'FHSQLMonitor';"
Add-Content $outputFile "	DECLARE @pbiSchema            nvarchar(128) = 'FHSM';"
Add-Content $outputFile ""
Add-Content $outputFile "	--"
Add-Content $outputFile "	-- Service parameters - They are only used during a fresh installation and not during an update"
Add-Content $outputFile "	--   When updating the already configured values in the tables dbo.fhsmSchedules and dbo.fhsmRetentions remains unchanged"
Add-Content $outputFile "	--"
Add-Content $outputFile "	DECLARE @fhsqlAgentJobName              nvarchar(128) = 'FHSQLMonitor in ' + @fhSQLMonitorDatabase;"
Add-Content $outputFile "	DECLARE @blocksAndDeadlocksFilePath     nvarchar(260) = NULL;"
Add-Content $outputFile "	DECLARE @olaDatabase                    nvarchar(128) = NULL;"
Add-Content $outputFile ""
Add-Content $outputFile "	DECLARE @enableAgentJobs                bit = 1;"
Add-Content $outputFile "	DECLARE @enableAgentJobsPerformance     bit = 1;"
Add-Content $outputFile "	DECLARE @enableAgeOfStatistics          bit = 1;"
Add-Content $outputFile "	DECLARE @enableBackupStatus             bit = 1;"
Add-Content $outputFile "	DECLARE @enableBlocksAndDeadlocks       bit = 1;"
Add-Content $outputFile "	DECLARE @enableCapacity                 bit = 1;"
Add-Content $outputFile "	DECLARE @enableConnections              bit = 1;"
Add-Content $outputFile "	DECLARE @enableCPUUtilization           bit = 1;"
Add-Content $outputFile "	DECLARE @enableDatabaseIO               bit = 1;"
Add-Content $outputFile "	DECLARE @enableDatabaseState            bit = 1;"
Add-Content $outputFile "	DECLARE @enableIndexOperational         bit = 1;"
Add-Content $outputFile "	DECLARE @enableIndexPhysical            bit = 1;"
Add-Content $outputFile "	DECLARE @enableIndexUsage               bit = 1;"
Add-Content $outputFile "	DECLARE @enableInstanceState            bit = 1;"
Add-Content $outputFile "	DECLARE @enableMissingIndexes           bit = 1;"
Add-Content $outputFile "	DECLARE @enablePerformanceStatistics    bit = 1;"
Add-Content $outputFile "	DECLARE @enablePlanCacheUsage           bit = 1;"
Add-Content $outputFile "	DECLARE @enablePlanGuides               bit = 1;"
Add-Content $outputFile "	DECLARE @enableQueryStatistics          bit = 1;"
Add-Content $outputFile "	DECLARE @enableTriggers                 bit = 1;"
Add-Content $outputFile "	DECLARE @enableWaitStatistics           bit = 1;"
Add-Content $outputFile "	DECLARE @enableWhoIsActive              bit = 1;"
Add-Content $outputFile "	DECLARE @enableIndexRebuild             bit = 0;"
Add-Content $outputFile "	DECLARE @enableIndexReorganize          bit = 0;"
Add-Content $outputFile "	DECLARE @enableUpdateAllStatistics      bit = 0;"
Add-Content $outputFile "	DECLARE @enableUpdateModifiedStatistics bit = 0;"
Add-Content $outputFile "END;"
Add-Content $outputFile ""
Add-Content $outputFile "--"
Add-Content $outputFile "-- No need to change more from here on"
Add-Content $outputFile "--"
Add-Content $outputFile ""
Add-Content $outputFile "DECLARE @currentAgentJobName nvarchar(128);"
Add-Content $outputFile "DECLARE @currentVersion nvarchar(128);"
Add-Content $outputFile "DECLARE @installationJobExecuting nvarchar(16);"
Add-Content $outputFile "DECLARE @installationJobStatus int;"
Add-Content $outputFile "DECLARE @installationMsg nvarchar(max);"
Add-Content $outputFile "DECLARE @installationNow datetime;"
Add-Content $outputFile "DECLARE @installationNowStr nvarchar(max);"
Add-Content $outputFile "DECLARE @installationWaitCnt int;"
Add-Content $outputFile "DECLARE @installUpgradeFlag int;"
Add-Content $outputFile "DECLARE @serverInfo nvarchar(max);"
Add-Content $outputFile "DECLARE @stmt nvarchar(max);"
Add-Content $outputFile ""
Add-Content $outputFile "IF (DB_ID(@fhSQLMonitorDatabase) IS NULL)"
Add-Content $outputFile "BEGIN"
Add-Content $outputFile "	SET @installUpgradeFlag = 1;	-- 1: Install"
Add-Content $outputFile "END"
Add-Content $outputFile "ELSE BEGIN"
Add-Content $outputFile "	SET @installUpgradeFlag = 2;	-- 2: Upgrade"
Add-Content $outputFile ""
Add-Content $outputFile "	SET @stmt = 'SET @currentVersion = ' + QUOTENAME(@fhSQLMonitorDatabase) + '.dbo.fhsmFNGetConfiguration(''Version'');';"
Add-Content $outputFile "	EXEC sp_executesql @stmt, N'@currentVersion nvarchar(128) OUTPUT', @currentVersion = @currentVersion OUTPUT;"
Add-Content $outputFile "	SET @currentVersion = COALESCE(@currentVersion, 'N.A.');"
Add-Content $outputFile ""
Add-Content $outputFile "	SET @stmt = 'SET @currentAgentJobName = ' + QUOTENAME(@fhSQLMonitorDatabase) + '.dbo.fhsmFNGetConfiguration(''AgentJobName'');';"
Add-Content $outputFile "	EXEC sp_executesql @stmt, N'@currentAgentJobName nvarchar(128) OUTPUT', @currentAgentJobName = @currentAgentJobName OUTPUT;"
Add-Content $outputFile "	SET @fhsqlAgentJobName = COALESCE(@currentAgentJobName, @fhsqlAgentJobName);"
Add-Content $outputFile "END;"
Add-Content $outputFile ""
Add-Content $outputFile "SET @serverInfo = @@SERVERNAME + COALESCE('\' + CAST(SERVERPROPERTY ('InstanceName') AS nvarchar(128)), '');"
Add-Content $outputFile ""
Add-Content $outputFile "RAISERROR('', 0, 1) WITH NOWAIT;"
Add-Content $outputFile ("SET @installationMsg = CASE @installUpgradeFlag WHEN 1 THEN 'Install version " + $versionNumber + "' + ' of' ELSE 'Upgrade' END + ' FHSQLMonitor in database ' + @fhSQLMonitorDatabase + ' on ' + @serverInfo + ' ' + CASE @installUpgradeFlag WHEN 1 THEN '' ELSE 'from ' + @currentVersion + ' to " + $versionNumber + "' END;")
Add-Content $outputFile "RAISERROR(@installationMsg, 0, 1) WITH NOWAIT;"
Add-Content $outputFile ""
Add-Content $outputFile "--"
Add-Content $outputFile "-- Get job enabled status"
Add-Content $outputFile "--"
Add-Content $outputFile "BEGIN"
Add-Content $outputFile "	SET @installationJobStatus ="
Add-Content $outputFile "		COALESCE("
Add-Content $outputFile "			("
Add-Content $outputFile "				SELECT sj.enabled"
Add-Content $outputFile "				FROM msdb.dbo.sysjobs AS sj"
Add-Content $outputFile "				WHERE (sj.name = @fhsqlAgentJobName)"
Add-Content $outputFile "			),"
Add-Content $outputFile "			-1"
Add-Content $outputFile "		);"
Add-Content $outputFile ""
Add-Content $outputFile "	IF (@installationJobStatus IN (0, 1))"
Add-Content $outputFile "	BEGIN"
Add-Content $outputFile "       RAISERROR('', 0, 1) WITH NOWAIT;"
Add-Content $outputFile "		SET @installationMsg = 'Agent job ' + QUOTENAME(@fhsqlAgentJobName) + ' is ' + CASE @installationJobStatus WHEN 1 THEN 'enabled' WHEN 0 THEN 'disabled' END;"
Add-Content $outputFile "		RAISERROR(@installationMsg, 0, 1) WITH NOWAIT;"
Add-Content $outputFile "	END;"
Add-Content $outputFile "END;"
Add-Content $outputFile ""
Add-Content $outputFile "--"
Add-Content $outputFile "-- Disable job if enabled"
Add-Content $outputFile "--"
Add-Content $outputFile "IF (@installationJobStatus = 1)"
Add-Content $outputFile "BEGIN"
Add-Content $outputFile "   RAISERROR('', 0, 1) WITH NOWAIT;"
Add-Content $outputFile "	SET @installationMsg = 'Disabling job ' + QUOTENAME(@fhsqlAgentJobName);"
Add-Content $outputFile "	RAISERROR(@installationMsg, 0, 1) WITH NOWAIT;"
Add-Content $outputFile ""
Add-Content $outputFile "	EXEC msdb.dbo.sp_update_job"
Add-Content $outputFile "		@job_name = @fhsqlAgentJobName,"
Add-Content $outputFile "		@enabled = 0;"
Add-Content $outputFile ""
Add-Content $outputFile "	WAITFOR DELAY '00:00:10';"
Add-Content $outputFile "END;"
Add-Content $outputFile ""
Add-Content $outputFile "--"
Add-Content $outputFile "-- Wait until job has stopped executing"
Add-Content $outputFile "--"
Add-Content $outputFile "BEGIN"
Add-Content $outputFile "	SET @installationWaitCnt = 0;"
Add-Content $outputFile ""
Add-Content $outputFile "	SET @installationJobExecuting = 'Running';"
Add-Content $outputFile ""
Add-Content $outputFile "	WHILE (@installationJobExecuting = 'Running')"
Add-Content $outputFile "	BEGIN"
Add-Content $outputFile "		SET @installationJobExecuting = ("
Add-Content $outputFile "			SELECT"
Add-Content $outputFile "				TOP 1"
Add-Content $outputFile "				CASE"
Add-Content $outputFile "					WHEN ja.job_id IS NOT NULL AND ja.stop_execution_date IS NULL THEN 'Running'"
Add-Content $outputFile "					WHEN jh.run_status = 0 THEN 'Failed'"
Add-Content $outputFile "					WHEN jh.run_status = 1 THEN 'Succeeded'"
Add-Content $outputFile "					WHEN jh.run_status = 2 THEN 'Retry'"
Add-Content $outputFile "					WHEN jh.run_status = 3 THEN 'Cancelled'"
Add-Content $outputFile "				END AS JobLastOutcome"
Add-Content $outputFile "			FROM msdb.dbo.sysjobs AS j"
Add-Content $outputFile "			LEFT JOIN msdb.dbo.sysjobactivity AS ja ON"
Add-Content $outputFile "				(ja.job_id = j.job_id)"
Add-Content $outputFile "				AND (ja.run_requested_date IS NOT NULL)"
Add-Content $outputFile "				AND (ja.start_execution_date IS NOT NULL)"
Add-Content $outputFile "			LEFT JOIN msdb.dbo.sysjobsteps AS js ON"
Add-Content $outputFile "				(js.job_id = ja.job_id)"
Add-Content $outputFile "				AND (js.step_id = ja.last_executed_step_id)"
Add-Content $outputFile "			LEFT JOIN msdb.dbo.sysjobhistory AS jh ON"
Add-Content $outputFile "				(jh.job_id = j.job_id)"
Add-Content $outputFile "				AND (jh.instance_id = ja.job_history_id)"
Add-Content $outputFile "			WHERE j.name = @fhsqlAgentJobName"
Add-Content $outputFile "			ORDER BY ja.start_execution_date DESC"
Add-Content $outputFile "		);"
Add-Content $outputFile ""
Add-Content $outputFile "		IF (@installationJobExecuting = 'Running')"
Add-Content $outputFile "		BEGIN"
Add-Content $outputFile "			SET @installationWaitCnt = @installationWaitCnt + 1;"
Add-Content $outputFile ""
Add-Content $outputFile "			SET @installationNow = GETDATE();"
Add-Content $outputFile "			SET @installationNowStr = CONVERT(nvarchar, @installationNow, 126);"
Add-Content $outputFile "			SET @installationNowStr = REPLACE(LEFT(@installationNowStr, LEN(@installationNowStr) - 4), 'T', ' ');"
Add-Content $outputFile ""
Add-Content $outputFile "			SET @installationMsg = '  Waiting for job ' + QUOTENAME(@fhsqlAgentJobName) + ' to stop executing - #:' + CAST(@installationWaitCnt AS nvarchar) + ' - ' + @installationNowStr;"
Add-Content $outputFile "			RAISERROR(@installationMsg, 0, 1) WITH NOWAIT;"
Add-Content $outputFile ""
Add-Content $outputFile "			WAITFOR DELAY '00:00:05';"
Add-Content $outputFile "		END;"
Add-Content $outputFile "	END;"
Add-Content $outputFile "END;"

$filenames = Get-Content InstallationFileNames.txt
foreach ($file in $filenames) {
    echo $file

    $fileItem = Get-Item $file
    $fileLastWriteTimeStr = ($fileItem.LastWriteTime).ToString("yyyy:MM:dd HH:mm:ss")

    $content = Get-Content $file -Raw
    $content = $content.Replace('''', '''''')

    Add-Content $outputFile ""
    Add-Content $outputFile "--"
    Add-Content $outputFile ("-- File part:" + $file + " modified: " + $fileLastWriteTimeStr)
    Add-Content $outputFile "--"

    Add-Content $outputFile "SET @stmt = '"

    if ($file -ne "_Install-FHSQLMonitor.sql") {
        Add-Content $outputFile "USE [' + @fhSQLMonitorDatabase + '];"
    }

    Add-Content $outputFile $content
    Add-Content $outputFile "';"

    if ($file -eq "_Install-FHSQLMonitor.sql") {
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @createSQLAgentJob = 1;',                                'SET @createSQLAgentJob = ' + CAST(@createSQLAgentJob AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @fhSQLMonitorDatabase = ''FHSQLMonitor'';',              'SET @fhSQLMonitorDatabase = ''' + @fhSQLMonitorDatabase + ''';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @fhsqlAgentJobName = ''FHSQLMonitor in FHSQLMonitor'';', 'SET @fhsqlAgentJobName = ''' + @fhsqlAgentJobName + ''';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @pbiSchema = ''FHSM'';',                                 'SET @pbiSchema = ''' + @pbiSchema + ''';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @buildTimeStr = ''YYYY.MM.DD HH.MM.SS'';',               'SET @buildTimeStr = ''$buildTimeStr'';');"
    } else {
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @blocksAndDeadlocksFilePath = NULL;', 'SET @blocksAndDeadlocksFilePath = ' + COALESCE('''' + CAST(@blocksAndDeadlocksFilePath AS nvarchar) + '''', 'NULL') + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @olaDatabase = NULL;', 'SET @olaDatabase = ' + COALESCE('''' + CAST(@olaDatabase AS nvarchar) + '''', 'NULL') + ';');"
        Add-Content $outputFile ""
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableAgentJobs = 0;',                'SET @enableAgentJobs = '                + CAST(@enableAgentJobs AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableAgentJobsPerformance = 0;',     'SET @enableAgentJobsPerformance = '     + CAST(@enableAgentJobsPerformance AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableAgeOfStatistics = 0;',          'SET @enableAgeOfStatistics = '          + CAST(@enableAgeOfStatistics AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableBackupStatus = 0;',             'SET @enableBackupStatus = '             + CAST(@enableBackupStatus AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableBlocksAndDeadlocks = 0;',       'SET @enableBlocksAndDeadlocks = '       + CAST(@enableBlocksAndDeadlocks AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableCapacity = 0;',                 'SET @enableCapacity = '                 + CAST(@enableCapacity AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableConnections = 0;',              'SET @enableConnections = '              + CAST(@enableConnections AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableCPUUtilization = 0;',           'SET @enableCPUUtilization = '           + CAST(@enableCPUUtilization AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableDatabaseIO = 0;',               'SET @enableDatabaseIO = '               + CAST(@enableDatabaseIO AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableDatabaseState = 0;',            'SET @enableDatabaseState = '            + CAST(@enableDatabaseState AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableIndexOperational = 0;',         'SET @enableIndexOperational = '         + CAST(@enableIndexOperational AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableIndexPhysical = 0;',            'SET @enableIndexPhysical = '            + CAST(@enableIndexPhysical AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableIndexUsage = 0;',               'SET @enableIndexUsage = '               + CAST(@enableIndexUsage AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableInstanceState = 0;',            'SET @enableInstanceState = '            + CAST(@enableInstanceState AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableMissingIndexes = 0;',           'SET @enableMissingIndexes = '           + CAST(@enableMissingIndexes AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enablePerformanceStatistics = 0;',    'SET @enablePerformanceStatistics = '    + CAST(@enablePerformanceStatistics AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enablePlanCacheUsage = 0;',           'SET @enablePlanCacheUsage = '           + CAST(@enablePlanCacheUsage AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enablePlanGuides = 0;',               'SET @enablePlanGuides = '               + CAST(@enablePlanGuides AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableQueryStatistics = 0;',          'SET @enableQueryStatistics = '          + CAST(@enableQueryStatistics AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableTriggers = 0;',                 'SET @enableTriggers = '                 + CAST(@enableTriggers AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableWaitStatistics = 0;',           'SET @enableWaitStatistics = '           + CAST(@enableWaitStatistics AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableWhoIsActive = 0;',              'SET @enableWhoIsActive = '              + CAST(@enableWhoIsActive AS nvarchar) + ';');"

        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableIndexRebuild = 0;',             'SET @enableIndexRebuild = '             + CAST(@enableIndexRebuild AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableIndexReorganize = 0;',          'SET @enableIndexReorganize = '          + CAST(@enableIndexReorganize AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableUpdateAllStatistics = 0;',      'SET @enableUpdateAllStatistics = '      + CAST(@enableUpdateAllStatistics AS nvarchar) + ';');"
        Add-Content $outputFile "SET @stmt = REPLACE(@stmt, 'SET @enableUpdateModifiedStatistics = 0;', 'SET @enableUpdateModifiedStatistics = ' + CAST(@enableUpdateModifiedStatistics AS nvarchar) + ';');"
    }

    Add-Content $outputFile "EXEC(@stmt);"
}

Add-Content $outputFile ""
Add-Content $outputFile "--"
Add-Content $outputFile "-- Enable job again if it was enabled when we started"
Add-Content $outputFile "--"
Add-Content $outputFile "IF (@installationJobStatus = 1)"
Add-Content $outputFile "BEGIN"
Add-Content $outputFile "	RAISERROR('', 0, 1) WITH NOWAIT;"
Add-Content $outputFile "	SET @installationMsg = 'Enabling job ' + QUOTENAME(@fhsqlAgentJobName);"
Add-Content $outputFile "	RAISERROR(@installationMsg, 0, 1) WITH NOWAIT;"
Add-Content $outputFile ""
Add-Content $outputFile "	EXEC msdb.dbo.sp_update_job"
Add-Content $outputFile "		@job_name = @fhsqlAgentJobName,"
Add-Content $outputFile "		@enabled = 1;"
Add-Content $outputFile "END;"
Add-Content $outputFile ""
Add-Content $outputFile "RAISERROR('', 0, 1) WITH NOWAIT;"
Add-Content $outputFile ("SET @installationMsg = 'FHSQLMonitor in database ' + @fhSQLMonitorDatabase + ' on ' + @serverInfo + ' has been ' + CASE @installUpgradeFlag WHEN 1 THEN 'installed with' ELSE 'upgraded to' END + ' " + $versionNumber + "';")
Add-Content $outputFile "RAISERROR(@installationMsg, 0, 1) WITH NOWAIT;"
